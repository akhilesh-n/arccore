
MEMORY
{
    flash: org = 0x00000000,   len = 0x00100000 
    sram:  org = 0x40000000,   len = 0x0000c000 
}

SECTIONS
{
   GROUP : {
      .rcw : { }      
      .exception_tbl (VLECODE) : {}
#if defined(CFG_VLE)
       .text_vle (VLECODE) ALIGN(0x1000): {
             *(.text)
             *(.text_vle)
             *(.fini)
             *(.eini)
         }
       .init  : {}
       .init_vle (VLECODE) : {
             *(.init)
             *(.init_vle)
          }
        .ctors : {}
        .dtors : {}
        .rodata (CONST) : {
            *(.rdata)
            *(.rodata)
         }
#else       
      .text : { 
      		 *(.exception_tbl)
             *(.text)
             *(.rodata)
             *(.ctors)
             *(.dtors)    
             *(.init) 
             *(.fini) 		
             *(.eini)
             . = (.+15);
        }
#endif
	    extab      : {}  
	    extabindex : {}
        .sdata2     : {}   /* SHF_ALLOC + possibly SHF_WRITE (prob. ReadOnly)*/
        .sbss2      : {}   /* SHF_ALLOC +  SHF_WRITE , e.g const int apa = 0;*/
	    . = ALIGN(0x10);   /* Section alignment is 0x10 */ 	
	    __DATA_ROM = .;
	    .=.+SIZEOF(.data);
	    . = ALIGN(0x10);  /* Section alignment is 0x10 */
	    __SDATA = .;
	    .=.+SIZEOF(.sdata);
	    . = ALIGN(0x10);  /* Section alignment is 0x10 */
	    __SDATA0 = .;
	    .=.+SIZEOF(.PPC.EMB.sdata0);
	 }	 > flash

	GROUP : {
		__DATA_RAM = .;	
		.data (DATA) LOAD(ADDR(__DATA_ROM)) :  {}
		.sdata (DATA) LOAD(ADDR(__SDATA)): {}    /* .sdata - Initialized small data */
	    __DATA_END = . ;
	} > sram
	
	GROUP : {
	  __BSS_START = .;
	  .sbss    : {}  	/* sbss - un-initialized small data */									
	  .bss    : {}  
	  __BSS_END = .;
      .PPC.EMB.sdata0 LOAD(ADDR(__SDATA0)) : {}	/* Small data with offset to 0 */	    
      .PPC.EMB.sbss0  : {}
      .ramlog : { *(.ramlog_data) *(.ramlog_bss) }
	  _heap_addr = .;      
	} > sram
}   

_heap_end   = ADDR(sram)+SIZEOF(sram);
_heap_size  = _heap_end - _heap_addr;
__SP_INIT = _heap_end;
