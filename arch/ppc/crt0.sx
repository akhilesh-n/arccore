#define _ASSEMBLER_
#include "asm_ppc.h"

#if defined(__GNUC__)
.section ".rcw","ax"
.balign  4
#elif defined(__CWCC__) || defined(__DCC__)
	.section .rcw,4,"r"
#endif


	.global _resetconfiguration
_resetconfiguration:
#if defined(CFG_VLE)
	.byte  0x01   #no watchdog, VLE
#else
	.byte  0x00   #no watchdog
#endif	
	.byte  0x5A   #Boot identifier
	.byte  0x00
	.byte  0x00
	.long _start


	.extern _SDA_BASE_
	.extern _SDA2_BASE_
	.extern __SP_INIT
	.extern __DATA_RAM
	.extern __DATA_END
	.extern __BSS_START
	.extern __BSS_END
	.extern __DATA_ROM
	.extern exit
	.extern main
	
#if defined(__CWCC__) && defined(CFG_VLE)
.section .text_vle,text_vle
#elif defined(__DCC__)
	// Must be indented (diab)
	.section .text_vle,x
#elif defined(__GNUC__)
.section .text
#endif
	.align		4

	.globl	_start
	.type	_start,@function

	// Good information about the E500 is freescale doc: E500ABIUG.pdf
	
#if 0
.global _redled
_redled:
	// mpc5567qrtech: light up led K2 
	li r0, 0x0202
	lis r3, 0xC3F9013A@h
	ori r3, r3, 0xC3F90130@l
	stw r0, 8(r3)
	b _exit
#endif

__start:
_start:
#if (CFG_MPC560X)
	// For now, close down the watchdog.
	LOAD_ADDR_32(r8,0xFFF38000)
	LOAD_ADDR_32(r9,0x0000c520)
	stw		r9,0x10(r8)	
	LOAD_ADDR_32(r9,0x0000d928)
	stw		r9,0x10(r8)
	LOAD_ADDR_32(r9,0x8000010A)
	stw		r9,0x0(r8)
#endif	
	
	// Set up the reserved registers in EABI: r1,r2 and r13

	// r1, stack pointer
	LOAD_ADDR_32(1,__SP_INIT)
	
	// r13, base of .sdata
	LOAD_ADDR_32(13,_SDA_BASE_)

	// r2, base of .sdata2 and .sbss2
	LOAD_ADDR_32(2,_SDA2_BASE_)

	// make space for initial backchain..
	subi    r1,r1,16

/* Store winIDEA terminal connected status */
#if defined(USE_TTY_WINIDEA)
	LOAD_ADDR_32(r8,g_TConn)
	lbz r9,0(r8)
#endif

	/*  Clear all SRAM */
init_RAM:
	LOAD_ADDR_32(11,0x40000000)
#if (CFG_MPC560X)
	li r12,384 # loop counter to get all of SRAM;
	/* 48k/4 bytes/32 GPRs = 384, only 48k ram for MPC5606s */
#else
	li r12,640 # loop counter to get all of SRAM;
	/* 80k/4 bytes/32 GPRs = 640 */
#endif
	mtctr r12

init_ram_loop:
	stmw r0,0(r11) # write all 32 GPRs to SRAM
	addi r11,r11,128 # inc the ram ptr; 32 GPRs * 4 bytes = 128
	bdnz init_ram_loop # loop for 80k of SRAM


	// Copy initialized data from ROM to RAM
	LOAD_ADDR_32(3,__DATA_ROM)
	LOAD_ADDR_32(4,__DATA_RAM)
	LOAD_ADDR_32(5,__DATA_END)
	
	cmplw	r3,r4
	beq		skip_data
	cmplw	r4,r5
	beq		skip_data
	subi	r3,r3,1
	subi	r4,r4,1
copy_data:
	lbzu	r6,1(r3)
	stbu	r6,1(r4)
	cmplw	r4,r5
	bne+	copy_data
skip_data:

	/* Clear uninitialized data( holds both bss and sbss ) */
	LOAD_ADDR_32(3,__BSS_START)
	LOAD_ADDR_32(4,__BSS_END)
	cmplw	r3,r4
	beq		skip_bss
	li		r0,0
	subi	r3,r3,1
copy_bss:
	stbu	r0,1(r3)
	cmplw	r3,r4
	bne+	copy_bss
skip_bss:

/* Restore winIDEA terminal connected status */
#if defined(USE_TTY_WINIDEA)
	stb		r9,0(r8)
#endif

	/* Call main() with argc set to 1 and argv ignored */
	li	r3,1
	bl	main

	/* Call exit() with the return value from main() as argument */
	b	exit

	.globl	_exit
_exit:
	b	_exit


	.end
