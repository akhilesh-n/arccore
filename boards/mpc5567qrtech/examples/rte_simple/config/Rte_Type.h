/*
* Configuration of module: Rte (Rte_Type.h)
*
* Created by:              
* Copyright:               
*
* Configured for (MCU):    MPC5567
*
* Module vendor:           ArcCore
* Generator version:       0.0.13
*
* Generated by Arctic Studio (http://arccore.com) 
*/

/* Rte_Type.h */

#ifndef RTE_TYPE_H
#define RTE_TYPE_H

#include "Rte.h"

typedef void * Rte_Instance;

typedef boolean Boolean;

#define _DEFINED_TYPEDEF_FOR_Boolean_ 

typedef uint8 DigitalLevel;
#ifndef Low
#define Low ((DigitalLevel)0)
#endif /*Low*/
#ifndef High
#define High ((DigitalLevel)1)
#endif /*High*/
#define DigitalLevel_LowerLimit 0
#define DigitalLevel_UpperLimit 1

#define _DEFINED_TYPEDEF_FOR_DigitalLevel_ 

typedef uint8 EcuM_BootTargetType;
#ifndef ECUM_BOOT_TARGET_APP
#define ECUM_BOOT_TARGET_APP ((EcuM_BootTargetType)0)
#endif /*ECUM_BOOT_TARGET_APP*/
#ifndef ECUM_BOOT_TARGET_OEM_BOOTLOADER
#define ECUM_BOOT_TARGET_OEM_BOOTLOADER ((EcuM_BootTargetType)1)
#endif /*ECUM_BOOT_TARGET_OEM_BOOTLOADER*/
#ifndef ECUM_BOOT_TARGET_SYS_BOOTLOADER
#define ECUM_BOOT_TARGET_SYS_BOOTLOADER ((EcuM_BootTargetType)2)
#endif /*ECUM_BOOT_TARGET_SYS_BOOTLOADER*/
#define EcuM_BootTargetType_LowerLimit 0
#define EcuM_BootTargetType_UpperLimit 1

#define _DEFINED_TYPEDEF_FOR_EcuM_BootTargetType_ 

typedef uint8 EcuM_StateType;
#ifndef ECUM_STATE_STARTUP
#define ECUM_STATE_STARTUP ((EcuM_StateType)16)
#endif /*ECUM_STATE_STARTUP*/
#ifndef ECUM_STATE_STARTUP_ONE
#define ECUM_STATE_STARTUP_ONE ((EcuM_StateType)17)
#endif /*ECUM_STATE_STARTUP_ONE*/
#ifndef ECUM_STATE_STARTUP_TWO
#define ECUM_STATE_STARTUP_TWO ((EcuM_StateType)18)
#endif /*ECUM_STATE_STARTUP_TWO*/
#ifndef ECUM_STATE_WAKEUP
#define ECUM_STATE_WAKEUP ((EcuM_StateType)32)
#endif /*ECUM_STATE_WAKEUP*/
#ifndef ECUM_STATE_WAKEUP_ONE
#define ECUM_STATE_WAKEUP_ONE ((EcuM_StateType)33)
#endif /*ECUM_STATE_WAKEUP_ONE*/
#ifndef ECUM_STATE_WAKEUP_VALIDATION
#define ECUM_STATE_WAKEUP_VALIDATION ((EcuM_StateType)34)
#endif /*ECUM_STATE_WAKEUP_VALIDATION*/
#ifndef ECUM_STATE_WAKEUP_REACTION
#define ECUM_STATE_WAKEUP_REACTION ((EcuM_StateType)35)
#endif /*ECUM_STATE_WAKEUP_REACTION*/
#ifndef ECUM_STATE_WAKEUP_TWO
#define ECUM_STATE_WAKEUP_TWO ((EcuM_StateType)36)
#endif /*ECUM_STATE_WAKEUP_TWO*/
#ifndef ECUM_STATE_WAKEUP_WAKESLEEP
#define ECUM_STATE_WAKEUP_WAKESLEEP ((EcuM_StateType)37)
#endif /*ECUM_STATE_WAKEUP_WAKESLEEP*/
#ifndef ECUM_STATE_WAKEUP_TTII
#define ECUM_STATE_WAKEUP_TTII ((EcuM_StateType)38)
#endif /*ECUM_STATE_WAKEUP_TTII*/
#ifndef ECUM_STATE_RUN
#define ECUM_STATE_RUN ((EcuM_StateType)48)
#endif /*ECUM_STATE_RUN*/
#ifndef ECUM_STATE_APP_RUN
#define ECUM_STATE_APP_RUN ((EcuM_StateType)50)
#endif /*ECUM_STATE_APP_RUN*/
#ifndef ECUM_STATE_APP_POST_RUN
#define ECUM_STATE_APP_POST_RUN ((EcuM_StateType)51)
#endif /*ECUM_STATE_APP_POST_RUN*/
#ifndef ECUM_STATE_SHUTDOWN
#define ECUM_STATE_SHUTDOWN ((EcuM_StateType)64)
#endif /*ECUM_STATE_SHUTDOWN*/
#ifndef ECUM_STATE_PREP_SHUTDOWN
#define ECUM_STATE_PREP_SHUTDOWN ((EcuM_StateType)68)
#endif /*ECUM_STATE_PREP_SHUTDOWN*/
#ifndef ECUM_STATE_GO_SLEEP
#define ECUM_STATE_GO_SLEEP ((EcuM_StateType)73)
#endif /*ECUM_STATE_GO_SLEEP*/
#ifndef ECUM_STATE_GO_OFF_ONE
#define ECUM_STATE_GO_OFF_ONE ((EcuM_StateType)77)
#endif /*ECUM_STATE_GO_OFF_ONE*/
#ifndef ECUM_STATE_GO_OFF_TWO
#define ECUM_STATE_GO_OFF_TWO ((EcuM_StateType)78)
#endif /*ECUM_STATE_GO_OFF_TWO*/
#ifndef ECUM_STATE_SLEEP
#define ECUM_STATE_SLEEP ((EcuM_StateType)80)
#endif /*ECUM_STATE_SLEEP*/
#ifndef ECUM_STATE_OFF
#define ECUM_STATE_OFF ((EcuM_StateType)128)
#endif /*ECUM_STATE_OFF*/
#ifndef ECUM_STATE_RESET
#define ECUM_STATE_RESET ((EcuM_StateType)144)
#endif /*ECUM_STATE_RESET*/
#define EcuM_StateType_LowerLimit 0x10
#define EcuM_StateType_UpperLimit 0x90

#define _DEFINED_TYPEDEF_FOR_EcuM_StateType_ 

typedef float Float;

#define _DEFINED_TYPEDEF_FOR_Float_ 

typedef sint32 Hertz;
#define Hertz_LowerLimit -2147483647
#define Hertz_UpperLimit 2147483647

#define _DEFINED_TYPEDEF_FOR_Hertz_ 

typedef uint16 IoHwAb_SignalType;
#define IoHwAb_SignalType_LowerLimit 0
#define IoHwAb_SignalType_UpperLimit 65535

#define _DEFINED_TYPEDEF_FOR_IoHwAb_SignalType_ 

typedef sint32 MilliAmpere;
#define MilliAmpere_LowerLimit -2147483647
#define MilliAmpere_UpperLimit 2147483647

#define _DEFINED_TYPEDEF_FOR_MilliAmpere_ 

typedef sint32 MilliOhm;
#define MilliOhm_LowerLimit -2147483647
#define MilliOhm_UpperLimit 2147483647

#define _DEFINED_TYPEDEF_FOR_MilliOhm_ 

typedef sint32 MilliVolt;
#define MilliVolt_LowerLimit -2147483647
#define MilliVolt_UpperLimit 2147483647

#define _DEFINED_TYPEDEF_FOR_MilliVolt_ 

typedef uint8 NvM_RequestResultType;
#ifndef NVM_REQ_OK
#define NVM_REQ_OK ((NvM_RequestResultType)0)
#endif /*NVM_REQ_OK*/
#ifndef NVM_REQ_NOT_OK
#define NVM_REQ_NOT_OK ((NvM_RequestResultType)1)
#endif /*NVM_REQ_NOT_OK*/
#ifndef NVM_REQ_PENDING
#define NVM_REQ_PENDING ((NvM_RequestResultType)2)
#endif /*NVM_REQ_PENDING*/
#ifndef NVM_REQ_INTEGRITY_FAILED
#define NVM_REQ_INTEGRITY_FAILED ((NvM_RequestResultType)3)
#endif /*NVM_REQ_INTEGRITY_FAILED*/
#ifndef NVM_REQ_BLOCK_SKIPPED
#define NVM_REQ_BLOCK_SKIPPED ((NvM_RequestResultType)4)
#endif /*NVM_REQ_BLOCK_SKIPPED*/
#ifndef NVM_REQ_NV_INVALIDATED
#define NVM_REQ_NV_INVALIDATED ((NvM_RequestResultType)5)
#endif /*NVM_REQ_NV_INVALIDATED*/

#define _DEFINED_TYPEDEF_FOR_NvM_RequestResultType_ 

typedef sint32 Percent;
#define Percent_LowerLimit -2147483647
#define Percent_UpperLimit 2147483647

#define _DEFINED_TYPEDEF_FOR_Percent_ 

typedef sint16 SInt16;
#define SInt16_LowerLimit -32768
#define SInt16_UpperLimit 32767

#define _DEFINED_TYPEDEF_FOR_SInt16_ 

typedef sint32 SInt32;
#define SInt32_LowerLimit -2147483648
#define SInt32_UpperLimit 2147483647

#define _DEFINED_TYPEDEF_FOR_SInt32_ 

typedef sint8 SInt8;
#define SInt8_LowerLimit -128
#define SInt8_UpperLimit 127

#define _DEFINED_TYPEDEF_FOR_SInt8_ 

typedef uint8 SignalQuality;
#ifndef SignalQuality_InitialValue
#define SignalQuality_InitialValue ((SignalQuality)0)
#endif /*SignalQuality_InitialValue*/
#ifndef SignalQuality_Error
#define SignalQuality_Error ((SignalQuality)1)
#endif /*SignalQuality_Error*/
#ifndef SignalQuality_Bad
#define SignalQuality_Bad ((SignalQuality)2)
#endif /*SignalQuality_Bad*/
#ifndef SignalQuality_Good
#define SignalQuality_Good ((SignalQuality)3)
#endif /*SignalQuality_Good*/
#define SignalQuality_LowerLimit 0
#define SignalQuality_UpperLimit 3

#define _DEFINED_TYPEDEF_FOR_SignalQuality_ 

typedef uint16 UInt16;
#define UInt16_LowerLimit 0
#define UInt16_UpperLimit 65535

#define _DEFINED_TYPEDEF_FOR_UInt16_ 

typedef uint32 UInt32;
#define UInt32_LowerLimit 0
#define UInt32_UpperLimit 4294967295

#define _DEFINED_TYPEDEF_FOR_UInt32_ 

typedef uint8 UInt8;
#define UInt8_LowerLimit 0
#define UInt8_UpperLimit 255

#define _DEFINED_TYPEDEF_FOR_UInt8_ 

typedef UInt8 DstPtrType[1024];

#define _DEFINED_TYPEDEF_FOR_DstPtrType_ 

typedef struct {
	UInt8 value;
} Rte_DE_Read_TesterRunnable_ReadArg1;

typedef struct {
	UInt8 value;
} Rte_DE_Read_TesterRunnable_ReadArg2;

typedef struct {
	UInt16 value;
} Rte_DE_Write_TesterRunnable_WriteResult;

typedef struct {
	UInt32 value;
} Rte_DE_Read_FreqReqRunnable_ReadFreqReq;

typedef struct {
	UInt32 value;
} Rte_DE_Write_FreqReqRunnable_WriteFreqReqInd;

typedef struct {
	UInt16 value;
} Rte_DE_Read_LoggerRunnable_ReadResult;

typedef struct {
	UInt16 value;
} Rte_DE_Read_Logger2Runnable_ReadResult;

typedef uint8 Rte_ModeType_WdgMMode;
#define RTE_TRANSITION_WdgMMode ((Rte_ModeType_WdgMMode)5)
#define RTE_MODE_WdgMMode_ALIVE_OK ((Rte_ModeType_WdgMMode)3)
#define RTE_MODE_WdgMMode_ALIVE_FAILED ((Rte_ModeType_WdgMMode)2)
#define RTE_MODE_WdgMMode_ALIVE_EXPIRED ((Rte_ModeType_WdgMMode)1)
#define RTE_MODE_WdgMMode_ALIVE_STOPPED ((Rte_ModeType_WdgMMode)4)
#define RTE_MODE_WdgMMode_ALIVE_DEACTIVATED ((Rte_ModeType_WdgMMode)0)

typedef uint8 Rte_ModeType_EcuM_Mode;
#define RTE_TRANSITION_EcuM_Mode ((Rte_ModeType_EcuM_Mode)6)
#define RTE_MODE_EcuM_Mode_STARTUP ((Rte_ModeType_EcuM_Mode)4)
#define RTE_MODE_EcuM_Mode_RUN ((Rte_ModeType_EcuM_Mode)1)
#define RTE_MODE_EcuM_Mode_POST_RUN ((Rte_ModeType_EcuM_Mode)0)
#define RTE_MODE_EcuM_Mode_SLEEP ((Rte_ModeType_EcuM_Mode)3)
#define RTE_MODE_EcuM_Mode_WAKE_SLEEP ((Rte_ModeType_EcuM_Mode)5)
#define RTE_MODE_EcuM_Mode_SHUTDOWN ((Rte_ModeType_EcuM_Mode)2)

typedef struct {
} Rte_PDS_Calculator_CalculatorOperations_P;
typedef struct {
} Rte_PDS_Calculator_CalculatorOperations_R;

typedef struct {
} Rte_PDS_Tester_CalculatorOperations_P;
typedef struct {
} Rte_PDS_Tester_CalculatorOperations_R;

typedef struct {
	Std_ReturnType (*Write_arg1)(UInt8);
	Std_ReturnType (*Write_arg2)(UInt8);
} Rte_PDS_Tester_ArgumentIf_P;
typedef struct {
	Std_ReturnType (*Read_arg1)(UInt8);
	Std_ReturnType (*Read_arg2)(UInt8);
} Rte_PDS_Tester_ArgumentIf_R;

typedef struct {
	Std_ReturnType (*Write_result)(UInt16);
} Rte_PDS_Tester_ResultIf_P;
typedef struct {
	Std_ReturnType (*Read_result)(UInt16);
} Rte_PDS_Tester_ResultIf_R;

typedef struct {
	Std_ReturnType (*Write_freq)(UInt32);
} Rte_PDS_Tester_FreqReqIf_P;
typedef struct {
	Std_ReturnType (*Read_freq)(UInt32);
} Rte_PDS_Tester_FreqReqIf_R;

typedef struct {
	Rte_DE_Read_TesterRunnable_ReadArg1* TesterRunnable_Arguments_arg1;
	Rte_DE_Read_TesterRunnable_ReadArg2* TesterRunnable_Arguments_arg2;
	Rte_DE_Read_FreqReqRunnable_ReadFreqReq* FreqReqRunnable_FreqReq_freq;
	Rte_DE_Write_TesterRunnable_WriteResult* TesterRunnable_Result_result;
	Rte_DE_Write_FreqReqRunnable_WriteFreqReqInd* FreqReqRunnable_FreqReqInd_freq;
} Rte_CDS_Tester;

typedef struct {
	Std_ReturnType (*Write_result)(UInt16);
} Rte_PDS_Logger_ResultIf_P;
typedef struct {
	Std_ReturnType (*Read_result)(UInt16);
} Rte_PDS_Logger_ResultIf_R;

typedef struct {
	Rte_DE_Read_LoggerRunnable_ReadResult* LoggerRunnable_Result_result;
} Rte_CDS_Logger;

typedef struct {
	Std_ReturnType (*Write_result)(UInt16);
} Rte_PDS_Logger2_ResultIf_P;
typedef struct {
	Std_ReturnType (*Read_result)(UInt16);
} Rte_PDS_Logger2_ResultIf_R;

typedef struct {
	Rte_DE_Read_Logger2Runnable_ReadResult* Logger2Runnable_Result_result;
} Rte_CDS_Logger2;

#endif
